using UnityEngine;
using UnityEngine.UI;
using System;
using System.Collections;


public static class MessageBox {

	public static UserResponse[] Ok = new UserResponse[]{UserResponse.OK};
	public static UserResponse[] OkCancel = new UserResponse[]{UserResponse.OK, UserResponse.Cancel};
	public static UserResponse[] YesNo = new UserResponse[]{UserResponse.Yes, UserResponse.No};
	public static UserResponse[] YesNoIgnore = new UserResponse[]{UserResponse.Yes, UserResponse.No, UserResponse.Ignore};
	public static UserResponse[] YesNoCancel = new UserResponse[]{UserResponse.Yes, UserResponse.No, UserResponse.Cancel};
	public static UserResponse[] QuitCancel = new UserResponse[]{UserResponse.Quit, UserResponse.Cancel};

	/// <summary>
	/// Display an info box with appropriate buttons, returns type
	/// [UserResponse] to registered method.
	/// </summary>
	/// <param name="title">Title text</param>
	/// <param name="body">Body text</param>
	/// <param name="buttonTypes">Button types (Type UserResponse)</param>
	/// <param name="methodToRegister">Method that will recieve the button clicked</param>
	public static void Show(string title, string body, UserResponse[] buttonTypes, MessageBoxHandler.ClickAction methodToRegister){
		MessageBoxHandler.messageBox.Show (title, body, buttonTypes, methodToRegister);
	}

}

/// <summary>
/// MessageBoxHandler should not be called directly
/// all calls should be made via static class MessageBox
/// </summary>
public class MessageBoxHandler : MonoBehaviour {

	public delegate void ClickAction(UserResponse action);
	public static event ClickAction OnClicked;

	public static MessageBoxHandler messageBox;
	public GameObject buttonPrefab;
	public Text titleText, bodyText;
	public Transform buttonTray;

	// Use constructor to set static variable
	// Awake doesn't run on disabled GameObjects
	public MessageBoxHandler(){
		messageBox = this;
	}

	public void buttonClick(GameObject button){
		/* call cleanup first
		 * to avoid deleting buttons
		 * generated by recursive OnClicked methods */
		Cleanup();
		if (OnClicked != null){
			OnClicked((UserResponse)System.Enum.Parse( typeof( UserResponse ), button.GetComponent<Text>().text ));
		}
	}

	public void Cleanup(){
		this.gameObject.SetActive(false);
		foreach(Transform button in buttonTray) {
			Destroy(button.gameObject);
		}
	}

	public void Show(string title, string body, UserResponse[] buttonTypes, ClickAction methodToRegister){
		Cleanup(); // make sure previous buttons are removed
		OnClicked = methodToRegister;
		titleText.text = title;
		bodyText.text = body;
		this.gameObject.SetActive(true);
		foreach(UserResponse buttonType in buttonTypes){
			GameObject temp = Instantiate(buttonPrefab);
			temp.GetComponentInChildren<Text>().text = buttonType.ToString();
			temp.GetComponent<Button>().onClick.AddListener(() => { buttonClick(temp.transform.GetChild(0).gameObject); });
			temp.transform.SetParent(buttonTray, false);
		}

	}

}
